mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 10,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
if(methods::is(M_stack,"SpatRaster")){
m1 <- M_stack[]
}
m1
if(methods::is(M_stack,"SpatRaster")){
m1 <- M_stack[]
}
if(is.data.frame(M_stack)){
m1 <- as.matrix(M_stack)
}
if(!is.matrix(m1)){
stop("M1 should be of class SpatRaster or matrix or data.frame")
}
if(methods::is(G_stack,"SpatRaster")){
g1 <- G_stack[]
}
if(is.data.frame(G_stack)){
g1 <- as.matrix(G_stack)
}
if(!is.matrix(g1)){
stop("G1 should be of class SpatRaster or matrix or data.frame")
}
# Check extrapolation zones
ids_extrapol <- mop::extrapolation_zones(M_stack = m1,G_stack = g1,as_vec = TRUE)
ids_extrapol
M_stack
library(mop)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
extr_zones <- mop::extrapolation_zones(M_stack = M_stack,
G_stack = G_stack,
as_vec =FALSE)
terra::plot(extr_zones)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 10,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 50,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 50,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
rm(list = ls())
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
class()
class(M_stack)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
M_stack = M_stack
G_stack =  G_stack
percent = 20
comp_each = NULL
standardize_vars=TRUE
normalized = TRUE
standardize_vars=TRUE
if(methods::is(M_stack,"SpatRaster")){
m1 <- M_stack[]
}
if(is.data.frame(M_stack)){
m1 <- as.matrix(M_stack)
}
if(!is.matrix(m1)){
stop("M1 should be of class SpatRaster or matrix or data.frame")
}
if(methods::is(G_stack,"SpatRaster")){
g1 <- G_stack[]
}
if(is.data.frame(G_stack)){
g1 <- as.matrix(G_stack)
}
if(!is.matrix(g1)){
stop("G1 should be of class SpatRaster or matrix or data.frame")
}
# Check extrapolation zones
ids_extrapol <- mop::extrapolation_zones(M_stack = m1,G_stack = g1,as_vec = TRUE)
if(length(ids_extrapol)> 0L){
g1[ids_extrapol,] <- NA
}
rm(list = ls())
devtools::install()
library(mop)
devtools::check()
library(mop)
source("~/Dropbox/mop_new/mop/R/extrapolation_zones.R", echo=TRUE)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
extr_zones <- mop::extrapolation_zones(M_stack = M_stack,
G_stack = G_stack,
as_vec =FALSE)
terra::plot(extr_zones)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
methods::is(M_stack,"SpatRaster")
library(mop)
terra::check()
library(mop)
terra::check()
devtools::check()
library(mop)
rm(list = ls())
library(mop)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
library(mop)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
if(methods::is(M_stack,"SpatRaster")){
m1 <- terra::values(M_stack)
}
if(is.data.frame(M_stack)){
m1 <- as.matrix(M_stack)
}
if(!is.matrix(m1)){
stop("M1 should be of class SpatRaster or matrix or data.frame")
}
if(methods::is(G_stack,"SpatRaster")){
g1 <- terra::values(G_stack)
}
if(is.data.frame(G_stack)){
g1 <- as.matrix(G_stack)
}
if(!is.matrix(g1)){
stop("G1 should be of class SpatRaster or matrix or data.frame")
}
# Check extrapolation zones
ids_extrapol <- mop::extrapolation_zones(M_stack = m1,G_stack = g1,
as_vec = FALSE)
M_stack = m1
G_stack = g1
as_vec = FALSE
M_stack
methods::is(M_stack,"SpatRaster")
is.data.frame(M_stack)
library(mop)
rm(list = ls())
library(mop)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = ls())
devtools::build()
devtools::check()
library(mop)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
library(mop)
future::plan("multissesion")
?future::plan
future::plan("future::multisession",workers = 2)
mop_test2 <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 1000,
normalized = TRUE, standardize_vars=TRUE)
future::plan("future::multisession",workers = 2)
mop_test2 <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 1000,
normalized = TRUE, standardize_vars=TRUE)
M_stack = M_stack
G_stack =  G_stack
percent = 20
comp_each = 1000
normalized = TRUE
standardize_vars=TRUE
if(methods::is(M_stack,"SpatRaster")){
m1 <- terra::values(M_stack)
}
if(is.data.frame(M_stack)){
m1 <- as.matrix(M_stack)
}
if(methods::is(M_stack,"SpatRaster")){
m1 <- terra::values(M_stack)
}
M_stack
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
# Run the code in parallel
future::plan("future::multisession",workers = 2)
mop_test2 <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 1000,
normalized = TRUE, standardize_vars=TRUE)
future::plan("future::sequential")
# Predictors
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
# Run the code in parallel
future::plan("future::multisession",workers = 2)
mop_test2 <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 1000,
normalized = TRUE, standardize_vars=TRUE)
future::plan("future::sequential")
# Run the code in parallel
future::plan("future::multisession",workers = 2)
mop_test2 <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 100,
normalized = TRUE, standardize_vars=TRUE)
future::plan("future::sequential")
future::plan("future::multisession",workers = 2)
mop_test2 <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 500,
normalized = TRUE, standardize_vars=TRUE)
future::plan("future::sequential")
devtools::document()
devtools::build()
devtools::check()
library(mop)
m_path <- system.file("extdata/M_layers", package = "mop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "mop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
mop_test <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = NULL,
normalized = TRUE, standardize_vars=TRUE)
terra::plot(mop_test)
# Run the code in parallel
future::plan("future::multisession",workers = 2)
mop_test2 <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 500,
normalized = TRUE, standardize_vars=TRUE)
future::plan("future::sequential")
future::plan("future::sequential")
future::plan("future::multisession",workers = 2)
mop_test_parallel <- mop::mop(M_stack = M_stack, G_stack =  G_stack,
percent = 20,comp_each = 500,
normalized = TRUE, standardize_vars=TRUE)
future::plan("future::sequential")
terra::plot(mop_test_parallel)
library(smop)
# data
## current conditions
reference_layers <- terra::rast(system.file("extdata", "reference_layers.tif",
package = "mop"))
## future conditions
layers_of_interest <- terra::rast(system.file("extdata",
"layers_of_interest.tif",
package = "mop"))
# plot the data
## variables to represent current conditions
terra::plot(reference_layers)
t1 <- system.time({
mop_basic_res <- mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t1 <- system.time({
mop_basic_res <- mop::mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t2 <- system.time({
mop_basic_res1 <- smop::mop(M_stack = reference_layers,G_stack = layers_of_interest,
percent = 50,standardize_vars = TRUE,normalized = TRUE)
})
t1/t2
t1 <- system.time({
mop_basic_res <- mop::mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t2 <- system.time({
mop_basic_res1 <- smop::mop(M_stack = reference_layers,G_stack = layers_of_interest,
percent = 50,standardize_vars = TRUE,normalized = TRUE)
})
t1/t2
t1 <- system.time({
mop_basic_res <- mop::mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t2 <- system.time({
mop_basic_res1 <- smop::mop(M_stack = reference_layers,G_stack = layers_of_interest,
percent = 50,standardize_vars = TRUE,normalized = TRUE)
})
t1/t2
terra::plot(mop_basic_res1)
terra::plot(mop_basic_res$mop_distances)
m_path <- system.file("extdata/M_layers", package = "smop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "smop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
t3 <- system.time({
mop_basic_res <- mop::mop(m = M_stack, g = G_stack,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,parallel = FALSE,
scale = TRUE, center = TRUE)
})
t4 <- system.time({
mop_basic_res1 <- smop::mop(M_stack = M_stack,G_stack = G_stack,
comp_each = NULL,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
})
t3/t4
t4 <- system.time({
mop_basic_res1 <- smop::mop(M_stack = M_stack,G_stack = G_stack,
comp_each = NULL,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
})
t3/t4
t3 <- system.time({
mop_basic_res <- mop::mop(m = M_stack, g = G_stack,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,parallel = FALSE,
scale = TRUE, center = TRUE)
})
t4 <- system.time({
mop_basic_res1 <- smop::mop(M_stack = M_stack,G_stack = G_stack,
comp_each = NULL,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
})
t3/t4
terra::plot(mop_basic_res1)
t3 <- system.time({
mop_basic_res <- mop::mop(m = M_stack, g = G_stack,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,parallel = FALSE,
scale = TRUE, center = TRUE)
})
t4 <- system.time({
mop_basic_res1 <- smop::mop(M_stack = M_stack,G_stack = G_stack,
comp_each = NULL,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
})
t3/t4
library(smop)
library(mop)
# data
## current conditions
reference_layers <- terra::rast(system.file("extdata", "reference_layers.tif",
package = "mop"))
## future conditions
layers_of_interest <- terra::rast(system.file("extdata",
"layers_of_interest.tif",
package = "mop"))
# plot the data
## variables to represent current conditions
terra::plot(reference_layers)
t1 <- system.time({
mop_basic_res <- mop::mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t2 <- system.time({
mop_basic_res1 <- smop::mop(M_calibra  = reference_layers,G_transfer  = layers_of_interest,
percent = 50,standardize_vars = TRUE,normalized = TRUE)
})
t1/t2
t1 <- system.time({
mop_basic_res <- mop::mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t2 <- system.time({
mop_basic_res1 <- smop::mop(M_calibra  = reference_layers,G_transfer  = layers_of_interest,
percent = 50,standardize_vars = TRUE,normalized = TRUE)
})
t1/t2
t1 <- system.time({
mop_basic_res <- mop::mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t2 <- system.time({
mop_basic_res1 <- smop::mop(M_calibra  = reference_layers,G_transfer  = layers_of_interest,
percent = 50,standardize_vars = TRUE,normalized = TRUE)
})
t1/t2
t1 <- system.time({
mop_basic_res <- mop::mop(m = reference_layers, g = layers_of_interest,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,
scale = TRUE, center = TRUE)
})
t2 <- system.time({
mop_basic_res1 <- smop::mop(M_calibra  = reference_layers,G_transfer  = layers_of_interest,
percent = 50,standardize_vars = TRUE,normalized = TRUE)
})
t1/t2
r
terra::plot(mop_basic_res$mop_distances)
t2
m_path <- system.file("extdata/M_layers", package = "smop") |>
list.files(full.names=TRUE)
g_path <- system.file("extdata/G_layers", package = "smop") |>
list.files(full.names=TRUE)
M_stack <- terra::rast(m_path)
G_stack <- terra::rast(g_path)
t3 <- system.time({
mop_basic_res <- mop::mop(m = M_stack, g = G_stack,
type = "basic", calculate_distance = TRUE,percentage = 50,
where_distance = "all", distance = "euclidean",
rescale_distance =  TRUE,parallel = FALSE,
scale = TRUE, center = TRUE)
})
t4 <- system.time({
mop_basic_res1 <- smop::mop(M_calibra  = M_stack,G_transfer = G_stack,
comp_each = NULL,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
})
t3/t4
t4
