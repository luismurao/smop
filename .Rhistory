parD_mop <- parDist(list(reference_layers_m,layers_of_interest_m),
method="custom",func=euclideanFuncPtr)
parD_mop
#' par_mop_distance: Estimate mop distance between two matrices in parallel
#' par_mop_distance: Estimate mop distance between two matrices in parallel
#' @description par_mop_distances calculates the Euclidean distance
#' between two matrices in parallel.
#' par_mop_distance: Estimate mop distance between two matrices in parallel
#' @description par_mop_distances calculates the Euclidean distance
#' between two matrices in parallel.
#' @param M A numeric matrix of dimension n x m
#' @param G A numeric matrix of dimension n x m
#' par_mop_distance: Estimate mop distance between two matrices in parallel
#' @description par_mop_distances calculates the Euclidean distance
#' between two matrices in parallel.
#' @param M A numeric matrix of dimension n x m
#' @param G A numeric matrix of dimension n x m
#' @return A numeric value that represents the Euclidean distance between the
#' two matrices
#' par_mop_distance: Estimate mop distance between two matrices in parallel
#' @description par_mop_distances calculates the Euclidean distance
#' between two matrices in parallel.
#' @param M A numeric matrix of dimension n x m
#' @param G A numeric matrix of dimension n x m
#' @return A numeric value that represents the Euclidean distance between the
#' two matrices
#' @import Rcpp
#' @useDynLib smop
#' @examples
set.seed(111)
n=1000
M <- matrix(rnorm(4*n), 2*n, 2)
G <- matrix(rnorm(4*n), 2*n, 2)
mdist <- pmop_distance(M,G)
arma_code <- 'arma::vec calcMOP (arma::mat &x, arma::mat &y){
int n_rowx = x.n_rows;
int n_rowy = y.n_rows;
arma::vec prob = 0.10;
arma::vec output1(n_rowx);
arma::vec output2(n_rowy);
for(int i=0; i< n_rowy; ++i){
arma::mat A = y.row(i);
for(int j=0; j< n_rowx; ++j){
arma::mat B = x.row(j);
double a = arma::accu(arma::square(A - B));
output1[j] = a;
}
arma::vec outq = arma::quantile(output1,prob);
output2[i] = arma::mean(outq);
return output2;
}
}'
#compileuser-defined function and return pointer
#(RcppArmadillo is used as dependency)
euclideanFuncPtr<-cppXPtr(arma_code,depends=c("RcppArmadillo"))
arma_code <- 'arma::vec calcMOP (arma::mat &x, arma::mat &y){
int n_rowx = x.n_rows;
int n_rowy = y.n_rows;
arma::vec prob = {0.10};
arma::vec output1(n_rowx);
arma::vec output2(n_rowy);
for(int i=0; i< n_rowy; ++i){
arma::mat A = y.row(i);
for(int j=0; j< n_rowx; ++j){
arma::mat B = x.row(j);
double a = arma::accu(arma::square(A - B));
output1[j] = a;
}
arma::vec outq = arma::quantile(output1,prob);
output2[i] = arma::mean(outq);
return output2;
}
}'
#compileuser-defined function and return pointer
#(RcppArmadillo is used as dependency)
euclideanFuncPtr<-cppXPtr(arma_code,depends=c("RcppArmadillo"))
distm <- parallelDist::parDist(x=list(M,G),
method="custom",func=euclideanFuncPtr)
M
G
distm <- parallelDist::parDist(x=M,
method="custom",func=euclideanFuncPtr)
arma_code <- 'arma::vec calcMOP (const arma::mat &x, const arma::mat &y){
int n_rowx = x.n_rows;
int n_rowy = y.n_rows;
arma::vec prob = {0.10};
arma::vec output1(n_rowx);
arma::vec output2(n_rowy);
for(int i=0; i< n_rowy; ++i){
arma::mat A = y.row(i);
for(int j=0; j< n_rowx; ++j){
arma::mat B = x.row(j);
double a = arma::accu(arma::square(A - B));
output1[j] = a;
}
arma::vec outq = arma::quantile(output1,prob);
output2[i] = arma::mean(outq);
return output2;
}
}'
#compileuser-defined function and return pointer
#(RcppArmadillo is used as dependency)
euclideanFuncPtr<-cppXPtr(arma_code,depends=c("RcppArmadillo"))
distm <- parallelDist::parDist(x=M,
method="custom",func=euclideanFuncPtr)
arma_code <- 'arma::vec calcMOP (const arma::mat &x, const arma::mat &y){
int n_rowx = x.n_rows;
int n_rowy = y.n_rows;
arma::vec prob = {0.10};
arma::vec output1(n_rowx);
arma::vec output2(n_rowy);
for(int i=0; i< n_rowy; ++i){
arma::mat A = y.row(i);
for(int j=0; j< n_rowx; ++j){
arma::mat B = x.row(j);
double a = arma::accu(arma::square(A - B));
output1[j] = a;
}
arma::vec outq = arma::quantile(output1,prob);
output2[i] = arma::mean(outq);
return output2[0];
}
}'
#compileuser-defined function and return pointer
#(RcppArmadillo is used as dependency)
euclideanFuncPtr<-cppXPtr(arma_code,depends=c("RcppArmadillo"))
arma_code <- 'arma::vec calcMOP (const arma::mat &x, const arma::mat &y){
int n_rowx = x.n_rows;
int n_rowy = y.n_rows;
arma::vec prob = {0.10};
arma::vec output1(n_rowx);
arma::vec output2(n_rowy);
for(int i=0; i< n_rowy; ++i){
arma::mat A = y.row(i);
for(int j=0; j< n_rowx; ++j){
arma::mat B = x.row(j);
double a = arma::accu(arma::square(A - B));
output1[j] = a;
}
arma::vec outq = arma::quantile(output1,prob);
output2[i] = arma::mean(outq);
}
return output2;
}'
#compileuser-defined function and return pointer
#(RcppArmadillo is used as dependency)
euclideanFuncPtr<-cppXPtr(arma_code,depends=c("RcppArmadillo"))
distm <- parallelDist::parDist(x=M,
method="custom",func=euclideanFuncPtr)
?parallelDist::parDist
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
set.seed(10); amat <- matrix(rnorm(900, 2, 0.5), ncol = 3)
std::size_t i = begin; i < end; i++
set.seed(50); bmat <- matrix(rnorm(900*500, 2, 0.5), ncol = 3)
mop_dist(t(as.matrix(amat[1,])), bmat,prob = 0.1)
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
set.seed(10); amat <- matrix(rnorm(900, 2, 0.5), ncol = 3)
set.seed(50); bmat <- matrix(rnorm(900*500, 2, 0.5), ncol = 3)
mop_dist(t(as.matrix(amat[1,])), bmat,prob = 0.1)
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
A <- data.frame(Datasets = c("A", "B", "C"), in_B = c(NA, NA, NA))
B <- data.frame(Dataset = c("A", "B", "H", "D", "E", "F", "G"), irrelevent_column = NA)
A <- data.frame(Datasets = c("A", "B", "C"), in_B = c(NA, NA, NA))
B <- data.frame(Datasets = c("A", "B", "H", "D", "E", "F", "G"), irrelevent_column = NA)
library(dplyr)
A <- data.frame(Datasets = c("A", "B", "C"), in_B = c(NA, NA, NA))
B <- data.frame(Datasets = c("A", "B", "H", "D", "E", "F", "G"), irrelevent_column = NA)
inner_join(A,B)
A$Datasets %in% B$Datasets
library(smop)
library(pkgdown)
build_site()
bio10 <- geodata::cmip6_world("CNRM-CM6-1", "585", "2061-2080",
var="bioc", res=10, path=tempdir())
bio10_pre <- geodata::worldclim_global("bioc",res=10,path = tempdir())
t6 <- system.time({
future::plan("future::multisession",workers = 10)
mop_basic_res1 <- smop::mop(M_calibra = bio10_pre[[c(1,5,6,12,15)]],
G_transfer = bio10[[c(1,5,6,12,15)]],
comp_each = 10000,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
future::plan("future::sequential")
})
t6
726.124/60
terra::plot(mop_basic_res1)
png(filename = "man/figures/07_mop_world.png",width = 8,height = 6,res=150)
terra::plot(mop_basic_res1)
png(filename = "man/figures/07_mop_world.png",width = 8,height = 6,res=150)
terra::plot(mop_basic_res1)
png(filename = "man/figures/07_mop_world.png",width = 800,height = 600,res=150)
terra::plot(mop_basic_res1)
dev.off()
library(smop)
build_site()
png(filename = "man/figures/07_mop_world.png",width = 800,height = 600,res=120)
terra::plot(mop_basic_res1)
terra::plot(mop_basic_res1)
t6 <- system.time({
future::plan("future::multisession",workers = 10)
mop_basic_res1 <- smop::mop(M_calibra = bio10_pre[[c(1,5,6,12,15)]],
G_transfer = bio10[[c(1,5,6,12,15)]],
comp_each = 10000,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
future::plan("future::sequential")
})
terra::plot(c(mop_basic_res$mop_basic,mop_basic_res1))
bio10 <- geodata::cmip6_world("CNRM-CM6-1", "585", "2061-2080",
var="bioc", res=10, path=tempdir())
bio10_pre <- geodata::worldclim_global("bioc",res=10,path = tempdir())
t6 <- system.time({
future::plan("future::multisession",workers = 10)
mop_basic_res1 <- smop::mop(M_calibra = bio10_pre[[c(1,5,6,12,15)]],
G_transfer = bio10[[c(1,5,6,12,15)]],
comp_each = 10000,
percent = 50,standardize_vars = TRUE,
normalized = TRUE)
future::plan("future::sequential")
})
png(filename = "man/figures/07_mop_world.png",width = 800,height = 600,res=120)
terra::plot(mop_basic_res1)
dev.off()
build_site()
build_site()
mop_basic_res
mop_basic_res1
png(filename = "man/figures/07_mop_world.png",width = 800,height = 600,res=120)
par(mar=c(2,2,2,2))
terra::plot(mop_basic_res1)
dev.off()
build_site()
png(filename = "man/figures/07_mop_world.png",width = 800,height = 600,res=120)
par(mar=c(1,1,1,1))
terra::plot(mop_basic_res1)
dev.off()
par(mar=c(1,1,1,1))
png(filename = "man/figures/07_mop_world.png",width = 800,height = 600,res=120)
terra::plot(mop_basic_res1)
dev.off()
par(mar=c(1,1,1,1))
terra::plot(mop_basic_res1)
terra::plot(mop_basic_res1,mar=c(1,1,1,1))
terra::plot(mop_basic_res1,mar=c(2,2,2,2))
terra::plot(mop_basic_res1,mar=c(2,2,2,3))
terra::plot(mop_basic_res1,mar=c(2,2,1,3))
terra::plot(mop_basic_res1,mar=c(2,1,1,3))
terra::plot(mop_basic_res1,mar=c(1,1,1,3))
terra::plot(mop_basic_res1,mar=c(1,1,1,3.5))
png(filename = "man/figures/07_mop_world.png",width = 800,height = 600,res=120)
terra::plot(mop_basic_res1,mar=c(1,1,1,3.5))
dev.off()
build_site()
library(smop)
m_calibra <- terra::rast(list.files(system.file("extdata/M_layers",
package = "smop"),
pattern = ".tif$",
full.names = TRUE))
g_transfer <- terra::rast(list.files(system.file("extdata/G_layers",
package = "smop"),
pattern = ".tif$",
full.names = TRUE))
m_calibra->M_calibra
G_transfer = g_stack
M_calibra = m_calibra
G_transfer = g_transfer
if(methods::is(M_calibra,"matrix"))
mMat <- M_calibra
if(methods::is(M_calibra,"SpatRaster"))
mMat <- terra::values(M_calibra)
if(methods::is(G_transfer, "SpatRaster")){
gMat <- teraa::values(G_transfer)
mess_res <- G_transfer[[1]]
gMat <- stats::na.omit(gMat)
g_naIDs <- attr(gMat,"na.action")
}
if(methods::is(G_transfer, "SpatRaster")){
gMat <- terra::values(G_transfer)
mess_res <- G_transfer[[1]]
gMat <- stats::na.omit(gMat)
g_naIDs <- attr(gMat,"na.action")
}
mMat <- stats::na.omit(mMat)
mMat_sorted <- apply(mMat,2,sort,decreasing=F)
ncol(gMat) == ncol(mMat)
#'                                     pattern = ".tif$",
#'                                     full.names = TRUE))
#' g_transfer <- terra::rast(list.files(system.file("extdata/G_layers",
#'                                     package = "smop"),
#'                                     pattern = ".tif$",
#'                                     full.names = TRUE))
#'
#' messVals <- smop::mess(M_calibra = m_calibra,
#'                        G_transfer = g_transfer)
#' raster::plot(messVals)
ntb_mess <- function(M_calibra, G_transfer){
if(methods::is(M_calibra,"matrix"))
mMat <- M_calibra
if(methods::is(M_calibra,"SpatRaster"))
mMat <- terra::values(M_calibra)
if(methods::is(G_transfer, "SpatRaster")){
gMat <- terra::values(G_transfer)
mess_res <- G_transfer[[1]]
gMat <- stats::na.omit(gMat)
g_naIDs <- attr(gMat,"na.action")
}
mMat <- stats::na.omit(mMat)
mMat_sorted <- apply(mMat,2,sort,decreasing=F)
if(ncol(gMat) == ncol(mMat)){
c1 <- seq_len(ncol(mMat))
purrr::map(~.dismo_mess2(gVar =gMat[,.x],
mVar = mMat_sorted[,.x] ))
min_1 <- do.call(base::pmin, c1 )
mess_vals <- rep(NA,raster::ncell(mess_res))
if(length(g_naIDs) > 0L) {
mess_vals[-g_naIDs] <- min_1
} else{
mess_vals <- min_1
}
mess_res[] <- mess_vals
names(mess_res) <- "MESS"
return(mess_res)
}
warning("M_stack and G_stack must have the same number of variables")
return()
}
.dismo_mess2 <- function(gVar,mVar){
nrowsM <-  length(mVar)
comp_list <- list(gVar,mVar)
intI <- do.call(base::findInterval, comp_list)
f<-100*intI/nrowsM
maxv <- max(comp_list[[2]])
minv <- min(comp_list[[2]])
#opt1 <- 100*(comp_list[[1]]-minv)/(maxv-minv)
#opt2 <- 2*f
#opt3 <- 2 * (100-f)
#opt4 <- 100*(maxv-comp_list[[1]])/(maxv-minv)
simi <- ifelse(f==0, 100*(comp_list[[1]]-minv)/(maxv-minv),
ifelse(f<=50, 2*f,
ifelse(f<100, 2 * (100-f),
100*(maxv-comp_list[[1]])/(maxv-minv))))
return(simi)
}
c1 <- seq_len(ncol(mMat))
purrr::map(~.dismo_mess2(gVar =gMat[,.x],
mVar = mMat_sorted[,.x] ))
seq_len(ncol(mMat))
c1 <- seq_len(ncol(mMat)) |>
purrr::map(~.dismo_mess2(gVar =gMat[,.x],
mVar = mMat_sorted[,.x] ))
min_1 <- do.call(base::pmin, c1 )
mess_vals <- rep(NA,raster::ncell(mess_res))
if(length(g_naIDs) > 0L) {
mess_vals[-g_naIDs] <- min_1
} else{
mess_vals <- min_1
}
mess_res[] <- mess_vals
names(mess_res) <- "MESS"
plot(mess_res)
terra::plot(mess_res)
library(smop)
terra::ncell
library(smop)
library(smop)
library(smop)
m_calibra <- terra::rast(list.files(system.file("extdata/M_layers",
package = "smop"),
pattern = ".tif$",
full.names = TRUE))
g_transfer <- terra::rast(list.files(system.file("extdata/G_layers",
package = "smop"),
pattern = ".tif$",
full.names = TRUE))
messVals <- smop::mess(M_calibra = m_calibra,
G_transfer = g_transfer)
terra::plot(messVals)
library(pkgdown)
build_site()
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
set.seed(10); amat <- matrix(rnorm(900, 2, 0.5), ncol = 3)
set.seed(50); bmat <- matrix(rnorm(900*500, 2, 0.5), ncol = 3)
mop_dist(t(as.matrix(amat[1,])), bmat,prob = 0.1)
t(as.matrix(amat[1,]))
bmat
mop_dist(t(as.matrix(amat[1,])), bmat,prob = 0.1)
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
mop_parallel(as.matrix(amat[1,])), bmat,prob = 0.1)
mop_parallel(t(as.matrix(amat[1,])), bmat,prob = 0.1)
mop_parallel(t(as.matrix(amat[1,])), bmat,output = numeric(bmat),prob = 0.1)
mop_parallel(t(as.matrix(amat[1,])), bmat,output = numeric(10000),prob = 0.1)
numeric(10000)
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
Rcpp::sourceCpp("~/Dropbox/mopCpp/parallelD.cpp")
Rcpp::sourceCpp("~/Dropbox/mopCpp/parallelMOP.cpp")
Rcpp::sourceCpp("~/Dropbox/mopCpp/parallelMOP.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/par_mop.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/par_mop.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/par_mop.cpp")
Rcpp::sourceCpp("~/Dropbox/mop_new/test_means.cpp")
library(smop)
library(pkgdown)
build_site()
build_site()
# Update dependencies in DESCRIPTION
# install.packages('attachment', repos = 'https://thinkr-open.r-universe.dev')
attachment::att_amend_desc()
# Run tests and examples
devtools::test()
devtools::run_examples()
# Check package as CRAN
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
# Check content
# install.packages('checkhelper', repos = 'https://thinkr-open.r-universe.dev')
checkhelper::find_missing_tags()
library(smop)
# Check content
# install.packages('checkhelper', repos = 'https://thinkr-open.r-universe.dev')
checkhelper::find_missing_tags()
# _Check that you let the house clean after the check, examples and tests
all_files_remaining <- checkhelper::check_clean_userspace()
all_files_remaining
# Check spelling
# usethis::use_spell_check()
spelling::spell_check_package()
library(smop)
# Check spelling
# usethis::use_spell_check()
spelling::spell_check_package()
# Check URL are correct
# install.packages('urlchecker', repos = 'https://r-lib.r-universe.dev')
urlchecker::url_check()
urlchecker::url_update()
# check on other distributions
# _rhub
devtools::check_rhub()
library(hexSticker)
library(UCSCXenaTools)
#remotes::install_github("ropensci/UCSCXenaTools")
#> ====================
hexSticker::geom_pkgname("smop")
imgurl <- "~/Downloads/lavado.png"
sticker(imgurl, package="smop", p_size=20, s_x=1, s_y=.85, s_width=.6,
p_x = 1,p_y =1.65 ,
filename="inst/figures/imgfile.png",h_fill = "#F67500",
h_color = "#266491",spotlight = FALSE,l_alpha = 0.5)
sticker(imgurl, package="smop", p_size=20, s_x=1, s_y=.85, s_width=.6,
p_x = 1,p_y =1.65 ,
filename="inst/figures/imgfile.png",h_fill = "#F67500",
h_color = "#266491",spotlight = FALSE,l_alpha = 0.5)
# Run tests and examples
devtools::test()
devtools::run_examples()
# Check package as CRAN
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
# Check content
# install.packages('checkhelper', repos = 'https://thinkr-open.r-universe.dev')
checkhelper::find_missing_tags()
# _Check that you let the house clean after the check, examples and tests
all_files_remaining <- checkhelper::check_clean_userspace()
all_files_remaining
# Check spelling
# usethis::use_spell_check()
spelling::spell_check_package()
# Check URL are correct
# install.packages('urlchecker', repos = 'https://r-lib.r-universe.dev')
urlchecker::url_check()
urlchecker::url_update()
# check on other distributions
# _rhub
devtools::check_rhub()
usethis::use_git_ignore("revdep/")
usethis::use_build_ignore("revdep/")
devtools::revdep()
library(revdepcheck)
# In another session
id <- rstudioapi::terminalExecute("Rscript -e 'revdepcheck::revdep_check(num_workers = 4)'")
rstudioapi::terminalKill(id)
# See outputs
revdep_details(revdep = "pkg")
library(revdepcheck)
# Check reverse dependencies
# remotes::install_github("r-lib/revdepcheck")
install.packages('revdepcheck', repos = 'https://r-lib.r-universe.dev')
# Add comments for CRAN
usethis::use_cran_comments(open = rlang::is_interactive())
# Upgrade version number
usethis::use_version(which = c("patch", "minor", "major", "dev")[1])
imgurl <- "../lavado.png"
sticker(imgurl, package="smop", p_size=20, s_x=1, s_y=.85, s_width=.6,
p_x = 1,p_y =1.65 ,
filename="inst/figures/imgfile.png",h_fill = "#F67500",
h_color = "#266491",spotlight = FALSE,l_alpha = 0.5)
usethis::use_logo("inst/figures/imgfile.png")
pkgdown::build_favicons(overwrite = TRUE)
pkgdown::build_site()
